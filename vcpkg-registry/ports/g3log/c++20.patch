diff --git a/src/g3log/sink.hpp b/src/g3log/sink.hpp
index 70543b5..91efc22 100644
--- a/src/g3log/sink.hpp
+++ b/src/g3log/sink.hpp
@@ -70,7 +70,7 @@ namespace g3 {
          }
 
          template<typename Call, typename... Args>
-         auto async(Call call, Args &&... args)-> std::future< typename std::result_of<decltype(call)(T, Args...)>::type> {
+         auto async(Call call, Args &&... args)-> std::future< std::invoke_result_t<decltype(call), T, Args...> > {
             return g3::spawn_task(std::bind(call, _real_sink.get(), std::forward<Args>(args)...), _bg.get());
          }
       };
diff --git a/src/g3log/sinkhandle.hpp b/src/g3log/sinkhandle.hpp
index d0128a5..a5aadf8 100644
--- a/src/g3log/sinkhandle.hpp
+++ b/src/g3log/sinkhandle.hpp
@@ -37,12 +37,12 @@ namespace g3 {
       // the returned future will contain a bad_weak_ptr exception instead of the
       // call result.
       template<typename AsyncCall, typename... Args>
-      auto call(AsyncCall func , Args&& ... args) -> std::future<typename std::result_of<decltype(func)(T, Args...)>::type> {
+      auto call(AsyncCall func , Args&& ... args) -> std::future< std::invoke_result_t<decltype(func), T, Args...> > {
          try {
             std::shared_ptr<internal::Sink<T>> sink(_sink);
             return sink->async(func, std::forward<Args>(args)...);
          } catch (const std::bad_weak_ptr& e) {
-            typedef typename std::result_of<decltype(func)(T, Args...)>::type PromiseType;
+            using PromiseType = std::invoke_result_t<decltype(func), T, Args...>;
             std::promise<PromiseType> promise;
             promise.set_exception(std::make_exception_ptr(e));
             return std::move(promise.get_future());
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1492005..2eeaf84 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -43,7 +43,7 @@ cmake_minimum_required(VERSION 3.2)
 
 project(g3log CXX)
 
-set(CMAKE_CXX_STANDARD 14)
+set(CMAKE_CXX_STANDARD 20)
 set(CMAKE_CXX_STANDARD_REQUIRED ON)
 
 if(NOT CMAKE_BUILD_TYPE AND NOT (MSVC_IDE OR XCODE))
diff --git a/src/g3log/future.hpp b/src/g3log/future.hpp
index 370f377..00aacd6 100644
--- a/src/g3log/future.hpp
+++ b/src/g3log/future.hpp
@@ -42,9 +42,15 @@ namespace g3 {
    //  auto msg_call=[=](){return ("Hello from the Background");};
    //  auto future_msg = g3::spawn_task(msg_lambda, bgWorker.get());
    template <typename Func, class BgWorker>
+#if  __cplusplus >= 201703L
+   std::future<typename std::invoke_result<Func>::type> spawn_task(Func func, BgWorker *worker)
+   {
+      typedef typename std::invoke_result<Func>::type result_type;
+#else
    std::future<typename std::result_of<Func()>::type> spawn_task(Func func, BgWorker *worker)
    {
       typedef typename std::result_of<Func()>::type result_type;
+#endif
       typedef std::packaged_task<result_type()> task_type;
 
       if (nullptr == worker) {
