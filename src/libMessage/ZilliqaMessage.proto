syntax = "proto2";

package ZilliqaMessage;

message ByteArray
{
    required bytes data = 1;
}

// ============================================================================
// Primitives that are used for persistent storage
//
// NOTE:
//   For backward compatibility, all fields should be marked optional/repeated.
//   Only append new fields to the end of these messages.
//   This means that if a field is to be deprecated, do not remove it.
// ============================================================================

// Used in database "blockLinks"
message ProtoBlockLink
{
    optional uint64 index     = 1; // Added in: v1.0, Deprecated in: N/A
    optional uint64 dsindex   = 2; // Added in: v1.0, Deprecated in: N/A
    optional uint32 blocktype = 3; // Added in: v1.0, Deprecated in: N/A
    optional bytes blockhash  = 4; // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in databases "dsBlocks", "microBlocks", "txBlocks", and "VCBlocks"
message ProtoBlockBase
{
    message CoSignatures
    {
        optional ByteArray cs1   = 1;               // Added in: v1.0, Deprecated in: N/A
        repeated bool b1         = 2 [packed=true]; // Added in: v1.0, Deprecated in: N/A
        optional ByteArray cs2   = 3;               // Added in: v1.0, Deprecated in: N/A
        repeated bool b2         = 4 [packed=true]; // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    optional bytes blockhash     = 1;               // Added in: v1.0, Deprecated in: N/A
    optional CoSignatures cosigs = 2;               // Added in: v1.0, Deprecated in: N/A
    optional uint64 timestamp    = 3;               // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "dsBlocks"
message ProtoDSBlock
{
    message DSBlockHashSet
    {
        optional bytes shardinghash     = 1;  // Added in: v1.0, Deprecated in: N/A
        optional bytes reservedfield    = 2;  // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    message DSBlockHeader
    {
        optional uint32 dsdifficulty    = 1;  // Added in: v1.0, Deprecated in: N/A, Only LSB used
        optional uint32 difficulty      = 2;  // Added in: v1.0, Deprecated in: N/A, Only LSB used
        optional bytes prevhash         = 3;  // Added in: v1.0, Deprecated in: N/A, 32 bytes
        optional ByteArray leaderpubkey = 4;  // Added in: v1.0, Deprecated in: N/A
        optional uint64 blocknum        = 5;  // Added in: v1.0, Deprecated in: N/A
        optional uint64 epochnum        = 6;  // Added in: v1.0, Deprecated in: N/A
        optional ByteArray gasprice     = 7;  // Added in: v1.0, Deprecated in: N/A
        optional ByteArray swinfo       = 8;  // Added in: v1.0, Deprecated in: N/A
        message PowDSWinners
        {
            optional ByteArray key      = 1;  // Added in: v1.0, Deprecated in: N/A
            optional ByteArray val      = 2;  // Added in: v1.0, Deprecated in: N/A
            // Add new members here
        }
        repeated PowDSWinners dswinners = 9;  // Added in: v1.0, Deprecated in: N/A
        optional DSBlockHashSet hash    = 10; // Added in: v1.0, Deprecated in: N/A
        optional bytes committeehash    = 11; // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    optional DSBlockHeader header       = 1;  // Added in: v1.0, Deprecated in: N/A
    optional ProtoBlockBase blockbase   = 2;  // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "dsCommittee"
message ProtoDSNode
{
    optional ByteArray pubkey = 1; // Added in: v1.0, Deprecated in: N/A
    optional ByteArray peer   = 2; // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "dsCommittee"
message ProtoDSCommittee
{
    repeated ProtoDSNode dsnodes = 1; // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "microBlocks"
message ProtoMicroBlock
{
    message MicroBlockHeader
    {
        optional uint32 type           = 1;  // Added in: v1.0, Deprecated in: N/A, Only LSB used
        optional uint32 version        = 2;  // Added in: v1.0, Deprecated in: N/A
        optional uint32 shardid        = 3;  // Added in: v1.0, Deprecated in: N/A
        optional uint64 gaslimit       = 4;  // Added in: v1.0, Deprecated in: N/A
        optional uint64 gasused        = 5;  // Added in: v1.0, Deprecated in: N/A
        optional ByteArray rewards     = 6;  // Added in: v1.0, Deprecated in: N/A
        optional bytes prevhash        = 7;  // Added in: v1.0, Deprecated in: N/A
        optional uint64 epochnum       = 8;  // Added in: v1.0, Deprecated in: N/A
        optional bytes txroothash      = 9;  // Added in: v1.0, Deprecated in: N/A
        optional uint32 numtxs         = 10; // Added in: v1.0, Deprecated in: N/A
        optional ByteArray minerpubkey = 11; // Added in: v1.0, Deprecated in: N/A
        optional uint64 dsblocknum     = 12; // Added in: v1.0, Deprecated in: N/A
        optional bytes statedeltahash  = 13; // Added in: v1.0, Deprecated in: N/A
        optional bytes tranreceipthash = 14; // Added in: v1.0, Deprecated in: N/A
        optional bytes committeehash   = 15; // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    optional MicroBlockHeader header   = 1;  // Added in: v1.0, Deprecated in: N/A
    repeated bytes tranhashes          = 2;  // Added in: v1.0, Deprecated in: N/A
    optional ProtoBlockBase blockbase  = 3;  // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "shardStructure"
message ProtoShardingStructure
{
    message Member
    {
        optional ByteArray pubkey   = 1; // Added in: v1.0, Deprecated in: N/A
        optional ByteArray peerinfo = 2; // Added in: v1.0, Deprecated in: N/A
        optional uint32 reputation  = 3; // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    message Shard
    {
        repeated Member members     = 1; // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    repeated Shard shards           = 1; // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "txBlocks"
message ProtoMbInfo
{
    optional bytes mbhash   = 1; // Added in: v1.0, Deprecated in: N/A
    optional bytes txroot   = 2; // Added in: v1.0, Deprecated in: N/A
    optional uint32 shardid = 3; // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "txBlocks"
message ProtoTxBlock
{
    message TxBlockHashSet
    {
        optional bytes stateroothash   = 1;  // Added in: v1.0, Deprecated in: N/A
        optional bytes statedeltahash  = 2;  // Added in: v1.0, Deprecated in: N/A
        optional bytes mbinfohash      = 3;  // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    message TxBlockHeader
    {
        optional uint32 type           = 1;  // Added in: v1.0, Deprecated in: N/A, Only LSB used
        optional uint32 version        = 2;  // Added in: v1.0, Deprecated in: N/A
        optional uint64 gaslimit       = 3;  // Added in: v1.0, Deprecated in: N/A
        optional uint64 gasused        = 4;  // Added in: v1.0, Deprecated in: N/A
        optional ByteArray rewards     = 5;  // Added in: v1.0, Deprecated in: N/A
        optional bytes prevhash        = 6;  // Added in: v1.0, Deprecated in: N/A
        optional uint64 blocknum       = 7;  // Added in: v1.0, Deprecated in: N/A
        optional TxBlockHashSet hash   = 8;  // Added in: v1.0, Deprecated in: N/A
        optional uint32 numtxs         = 9;  // Added in: v1.0, Deprecated in: N/A
        optional ByteArray minerpubkey = 10; // Added in: v1.0, Deprecated in: N/A
        optional uint64 dsblocknum     = 11; // Added in: v1.0, Deprecated in: N/A
        optional bytes committeehash   = 12; // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    optional TxBlockHeader header      = 1;  // Added in: v1.0, Deprecated in: N/A
    repeated ProtoMbInfo mbinfos       = 2;  // Added in: v1.0, Deprecated in: N/A
    optional ProtoBlockBase blockbase  = 3;  // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "VCBlocks"
message ProtoVCBlock
{
    message VCBlockHeader
    {
        optional uint64 viewchangedsepochno           = 1; // Added in: v1.0, Deprecated in: N/A
        optional uint64 viewchangeepochno             = 2; // Added in: v1.0, Deprecated in: N/A
        optional uint32 viewchangestate               = 3; // Added in: v1.0, Deprecated in: N/A, Only LSB used
        optional ByteArray candidateleadernetworkinfo = 4; // Added in: v1.0, Deprecated in: N/A
        optional ByteArray candidateleaderpubkey      = 5; // Added in: v1.0, Deprecated in: N/A
        optional uint32 vccounter                     = 6; // Added in: v1.0, Deprecated in: N/A
        repeated ProtoDSNode faultyleaders            = 7; // Added in: v1.0, Deprecated in: N/A
        optional bytes committeehash                  = 8; // Added in: v1.0, Deprecated in: N/A
        optional bytes prevhash                       = 9; // Added in: v1.0, Deprecated in: N/A
        // Add new members here
    }
    optional VCBlockHeader header                     = 1; // Added in: v1.0, Deprecated in: N/A
    optional ProtoBlockBase blockbase                 = 2; // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// Used in database "diagnostic"
message ProtoDiagnosticData
{
    optional ProtoShardingStructure shards = 1; // Added in: v1.0, Deprecated in: N/A
    optional ProtoDSCommittee dscommittee  = 2; // Added in: v1.0, Deprecated in: N/A
    // Add new members here
}

// ============================================================================
// Primitives
// ============================================================================

message ProtoAccount
{
    message StorageData
    {
        required bytes keyhash       = 1;
        required string data         = 2;
    }
    optional bool numbersign       = 1; // For account delta (false=neg, true=pos)
    required ByteArray balance     = 2;
    required uint64 nonce          = 3;
    optional bytes storageroot     = 4;
    optional bytes codehash        = 5;
    optional uint64 createblocknum = 6;
    optional bytes initdata        = 7;
    optional bytes code            = 8;
    repeated StorageData storage   = 9;
}

message ProtoAccountStore
{
    message AddressAccount
    {
        required bytes address        = 1;
        required ProtoAccount account = 2;
    }
    repeated AddressAccount entries   = 3;
}

message ProtoPeer
{
    required ByteArray ipaddress    = 1;
    required uint32 listenporthost  = 2;
}

message ProtoPoWSolution
{
    required uint64 nonce        = 1;
    required bytes result        = 2;
    required bytes mixhash       = 3;
    required uint32 lookupid     = 4;
    required ByteArray gasprice  = 5;
}

message ProtoCommittee
{
    repeated ByteArray members = 1;
}

message ProtoShardingStructureWithPoWSolns
{
    message Member
    {
        required ByteArray pubkey         = 1;
        required ByteArray peerinfo       = 2;
        required uint32 reputation        = 3;
        required ProtoPoWSolution powsoln = 4;
    }
    message Shard
    {
        repeated Member members           = 1;
    }
    repeated Shard shards                 = 1;
}

message ProtoDSWinnerPoW
{
     required ByteArray pubkey         = 1;
     required ProtoPoWSolution powsoln = 2;
}

message ProtoTransactionCoreInfo
{
    required uint32 version         = 1;
    required uint64 nonce           = 2;
    required bytes toaddr           = 3;
    required ByteArray senderpubkey = 4;
    required ByteArray amount       = 5;
    required ByteArray gasprice     = 6;
    required uint64 gaslimit        = 7;
    required bytes code             = 8;
    required bytes data             = 9;
}

message ProtoTransaction
{
    required bytes tranid                  = 1;
    required ProtoTransactionCoreInfo info = 2;
    required ByteArray signature           = 3;
}

message ProtoTxnFileOffset
{
    repeated uint32 offsetinfile = 1;
}

message ProtoTransactionArray
{
    repeated ProtoTransaction transactions = 1;
}

message ProtoTransactionReceipt
{
    required bytes receipt    = 1;
    required uint64 cumgas = 2;
}

message ProtoTransactionWithReceipt
{
    required ProtoTransaction transaction    = 1;
    required ProtoTransactionReceipt receipt = 2;
}

message ProtoSWInfo
{
    required uint32 majorversion        = 1;
    required uint32 minorversion        = 2;
    required uint32 fixversion          = 3;
    required uint64 upgradeds           = 4;
    required uint32 commit              = 5;
}

message ProtoFallbackBlock
{
    message FallbackBlockHeader
    {
        required uint64 fallbackdsepochno    = 1;
        required uint64 fallbackepochno      = 2;
        required uint32 fallbackstate        = 3; // only LSB used
        required bytes stateroothash         = 4;
        required uint32 leaderconsensusid    = 5; // only lower 2 bytes used
        required ByteArray leadernetworkinfo = 6;
        required ByteArray leaderpubkey      = 7;
        required uint32 shardid              = 8;
        required bytes committeehash         = 9;
        required bytes prevhash              = 10;
    }
    required FallbackBlockHeader header      = 1;
    required ProtoBlockBase blockbase        = 2;
}

message ProtoFallbackBlockWShardingStructure
{
    required ProtoFallbackBlock fallbackblock   = 1;
    required ProtoShardingStructure sharding    = 2;
}

message ProtoSingleDirectoryBlock
{
    oneof directoryblock
    {
        ProtoDSBlock dsblock                                     = 1;
        ProtoVCBlock vcblock                                     = 2;
        ProtoFallbackBlockWShardingStructure fallbackblockwshard = 3;
    }
}

// ============================================================================
// Peer Manager messages
// ============================================================================

message PMHello
{
    message Data
    {
        required ByteArray pubkey  = 1;
        required uint32 listenport = 2;
    }
    required Data data             = 1;
    required ByteArray signature   = 2;
}

// ============================================================================
// Directory Service messages
// ============================================================================

message DSPoWSubmission
{
    message Data
    {
        required uint64 blocknumber        = 1;
        required uint32 difficultylevel    = 2; // only LSB used
        required ByteArray submitterpeer   = 3;
        required ByteArray submitterpubKey = 4;
        required uint64 nonce              = 5;
        required string resultinghash      = 6;
        required string mixhash            = 7;
        required uint32 lookupid           = 8;
        required ByteArray gasprice        = 9;
    }
    required Data data                     = 1;
    required ByteArray signature           = 2;
}

message DSPoWPacketSubmission
{
    repeated DSPoWSubmission dsPowSubmissions        = 1;
}

message DSMicroBlockSubmission
{
    required uint32 microblocktype       = 1; // only LSB used
    required uint64 epochnumber          = 2;
    repeated ProtoMicroBlock microblocks = 3;
    repeated bytes statedeltas           = 4;
}

message DSDSBlockAnnouncement
{
    required ProtoDSBlock dsblock                        = 1;
    required ProtoShardingStructureWithPoWSolns sharding = 2;
    repeated ProtoDSWinnerPoW dswinnerpows               = 3;
}

message DSFinalBlockAnnouncement
{
    required ProtoTxBlock txblock       = 1;
    optional ProtoMicroBlock microblock = 2;
}

message DSVCBlockAnnouncement
{
    required ByteArray vcblock = 1;
}

message DSMissingMicroBlocksErrorMsg
{
    repeated bytes mbhashes    = 1;
    required uint64 epochnum   = 2;
    required uint32 listenport = 3;
}

// ============================================================================
// Node messages
// ============================================================================

message NodeDSBlock
{
    required uint32 shardid                        = 1;
    required ProtoDSBlock dsblock                  = 2;
    repeated ProtoVCBlock vcblocks                 = 3;
    required ProtoShardingStructure sharding       = 4;
}

message NodeFinalBlock
{
    required uint64 dsblocknumber = 1;
    required uint32 consensusid   = 2;
    required ProtoTxBlock txblock = 3;
    required bytes statedelta     = 4;
    repeated uint32 shardids      = 5;
}

message NodeMBnForwardTransaction
{
    required ProtoMicroBlock microblock = 1;
    repeated ByteArray txnswithreceipt  = 2;
}

message NodeVCBlock
{
    required ProtoVCBlock vcblock = 1;
}

message NodeForwardTxnBlock
{
    required uint64 epochnumber            = 1;
    required uint64 dsblocknum             = 2;
    required uint32 shardid                = 3;
    required ByteArray pubkey              = 4;
    repeated ProtoTransaction transactions = 5;
    required ByteArray signature           = 6;
}

message NodeMicroBlockAnnouncement
{
    required ProtoMicroBlock microblock = 1;
}

message NodeFallbackBlockAnnouncement
{
    required ByteArray fallbackblock = 1;
}

message NodeFallbackBlock
{
    required ProtoFallbackBlock fallbackblock = 1;
}

message NodeMissingTxnsErrorMsg
{
    repeated bytes txnhashes   = 1;
    required uint64 epochnum   = 2;
    required uint32 listenport = 3;
}

// ============================================================================
// Lookup messages
// ============================================================================

message LookupGetSeedPeers
{
    required uint32 listenport = 1;
}

message LookupSetSeedPeers
{
    repeated ByteArray candidateseeds = 1;
    required ByteArray pubkey         = 2;
    required ByteArray signature      = 3;
}

// From normal node to lookup nodes.
message LookupGetDSInfoFromSeed
{
    required uint32 listenport =        1;
    required bool initialds =           2;
}

// From DS leader to lookup nodes and from lookup nodes to normal nodes.
message LookupSetDSInfoFromSeed
{
    required ProtoDSCommittee dscommittee = 1;
    required ByteArray pubkey             = 2;
    required ByteArray signature          = 3;
    required bool initialds               = 4;
}

// From new join lookup node or new join normal node to existing lookup node.
message LookupGetDSBlockFromSeed
{
    required uint64 lowblocknum            = 1;
    required uint64 highblocknum           = 2;
    required uint32 listenport             = 3;
}

// From lookup nodes to new join lookup node or new join normal node.
message LookupSetDSBlockFromSeed
{
    required uint64 lowblocknum    = 1;
    required uint64 highblocknum   = 2;
    repeated ProtoDSBlock dsblocks = 3;
    required ByteArray pubkey      = 4;
    required ByteArray signature   = 5;
}

// From new join lookup node or new join normal node to existing lookup node.
message LookupGetTxBlockFromSeed
{
    required uint64 lowblocknum  = 1;
    required uint64 highblocknum = 2;
    required uint32 listenport   = 3;
}

// From lookup nodes to new join lookup node or new join normal node.
message LookupSetTxBlockFromSeed
{
    required uint64 lowblocknum    = 1;
    required uint64 highblocknum   = 2;
    repeated ProtoTxBlock txblocks = 3;
    required ByteArray pubkey      = 4;
    required ByteArray signature   = 5;
}

message LookupGetStateDeltaFromSeed
{
    required uint64 blocknum     = 1;
    required uint32 listenport   = 2;
}

message LookupSetStateDeltaFromSeed
{
    required uint64 blocknum     = 1;
    required bytes statedelta    = 2;
    required ByteArray pubkey    = 3;
    required ByteArray signature = 4;
}

message LookupGetTxBodyFromSeed
{
    required bytes txhash      = 1;
    required uint32 listenport = 2;
}

message LookupSetTxBodyFromSeed
{
    required bytes txhash     = 1;
    required ByteArray txbody = 2;
}

message LookupGetNetworkIDFromSeed
{
    // Unused
}

message LookupSetNetworkIDFromSeed
{
    required string networkid = 1;
}

message LookupGetStateFromSeed
{
    required uint32 listenport = 1;
}

message LookupSetStateFromSeed
{
    required ByteArray accountstore          = 1;
    required ByteArray pubkey                = 2;
    required ByteArray signature             = 3;
}

message LookupSetLookupOffline
{
    required uint32 listenport = 1;
}

message LookupSetLookupOnline
{
    required uint32 listenport = 1;
    required ByteArray pubkey  = 2;
}

message LookupGetOfflineLookups
{
    required uint32 listenport = 1;
}

message LookupSetOfflineLookups
{
    repeated ByteArray nodes     = 1;
    required ByteArray pubkey    = 2;
    required ByteArray signature = 3;
}

message LookupRaiseStartPoW
{
    // Empty
}

message LookupGetStartPoWFromSeed
{
    required uint32 listenport = 1;
}

message LookupSetStartPoWFromSeed
{
    required uint64 blocknumber  = 1;
    required ByteArray pubkey    = 2;
    required ByteArray signature = 3;
}

// From archival node to lookup node.
message LookupGetShardsFromSeed
{
    required uint32 listenport = 1;
}

// From lookup node to archival node.
message LookupSetShardsFromSeed
{
    required ProtoShardingStructure sharding = 1;
    required ByteArray pubkey                = 2;
    required ByteArray signature             = 3;
}

message LookupGetMicroBlockFromLookup
{
    required uint32 portno            = 1;
    repeated bytes mbhashes           = 2;
}

message LookupSetMicroBlockFromLookup
{
    repeated ProtoMicroBlock microblocks = 1;
    required ByteArray pubkey            = 2;
    required ByteArray signature         = 3;
}

message LookupGetTxnsFromLookup
{
    required uint32 portno   = 1;
    repeated bytes txnhashes = 2;
}

message LookupSetTxnsFromLookup
{
    repeated ByteArray transactions = 1;
    required ByteArray pubkey       = 2;
    required ByteArray signature    = 3;
}

message LookupGetDirectoryBlocksFromSeed
{
    required uint32 portno      = 1;
    required uint64 indexnum    = 2;
}

message LookupSetDirectoryBlocksFromSeed
{
    required uint64 indexnum                     = 1;
    repeated ProtoSingleDirectoryBlock dirblocks = 2;
}

// ============================================================================
// Consensus messages
// ============================================================================

message ConsensusAnnouncement
{
    message ConsensusInfo
    {
        required uint32 consensusid           = 1;
        required uint64 blocknumber           = 2;
        required bytes blockhash              = 3; // 32 bytes
        required uint32 leaderid              = 4; // only lower 2 bytes used    
    }
    required ConsensusInfo consensusinfo      = 1;
    oneof announcement
    {
        DSDSBlockAnnouncement dsblock         = 2;
        NodeMicroBlockAnnouncement microblock = 3;
        DSFinalBlockAnnouncement finalblock   = 4;
        DSVCBlockAnnouncement vcblock         = 5;
        NodeFallbackBlockAnnouncement fallbackblock = 6;
    }
    required ByteArray signature              = 7;
}

message ConsensusCommit
{
    message ConsensusInfo
    {
        required uint32 consensusid        = 1;
        required uint64 blocknumber        = 2;
        required bytes blockhash           = 3; // 32 bytes
        required uint32 backupid           = 4; // only lower 2 bytes used
        required ByteArray commitpoint     = 5;
        required ByteArray commitpointhash = 6;
    }
    required ConsensusInfo consensusinfo   = 1;
    required ByteArray signature           = 2;
}

message ConsensusChallenge
{
    message ConsensusInfo
    {
        required uint32 consensusid         = 1;
        required uint64 blocknumber         = 2;
        required bytes blockhash            = 3; // 32 bytes
        required uint32 leaderid            = 4; // only lower 2 bytes used
        required uint32 subsetid            = 5; // only lower 2 byte used
        required ByteArray aggregatedcommit = 6;
        required ByteArray aggregatedkey    = 7;
        required ByteArray challenge        = 8;
    }
    required ConsensusInfo consensusinfo    = 1;
    required ByteArray signature            = 2;
}

message ConsensusResponse
{
    message ConsensusInfo
    {
        required uint32 consensusid      = 1;
        required uint64 blocknumber      = 2;
        required bytes blockhash         = 3; // 32 bytes
        required uint32 backupid         = 4; // only lower 2 byte used
        required uint32 subsetid         = 5; // only lower 2 byte used
        required ByteArray response      = 6;
    }
    required ConsensusInfo consensusinfo = 1;
    required ByteArray signature         = 2;
}

message ConsensusCollectiveSig
{
    message ConsensusInfo
    {
        required uint32 consensusid      = 1;
        required uint64 blocknumber      = 2;
        required bytes blockhash         = 3; // 32 bytes
        required uint32 leaderid         = 4; // only lower 2 bytes used
        required ByteArray collectivesig = 5;
        repeated bool bitmap             = 6 [packed=true];
    }
    required ConsensusInfo consensusinfo = 1;
    required ByteArray signature         = 2;
}

message ConsensusCommitFailure
{
    message ConsensusInfo
    {
        required uint32 consensusid      = 1;
        required uint64 blocknumber      = 2;
        required bytes blockhash         = 3; // 32 bytes
        required uint32 backupid         = 4; // only lower 2 bytes used
        required bytes errormsg          = 5;
    }
    required ConsensusInfo consensusinfo = 1;
    required ByteArray signature         = 2;
}

message ConsensusConsensusFailure
{
    message ConsensusInfo
    {
        required uint32 consensusid      = 1;
        required uint64 blocknumber      = 2;
        required bytes blockhash         = 3; // 32 bytes
        required uint32 leaderid         = 4; // only lower 2 bytes used
    }
    required ConsensusInfo consensusinfo = 1;
    required ByteArray signature         = 2;
}

// ============================================================================
// View change pre check messages
// ============================================================================

// From node undergoing vc pre check to fetch latest blocks
message LookupGetDSTxBlockFromSeed
{
    required uint64 dslowblocknum            = 1;
    required uint64 dshighblocknum           = 2;
    required uint64 txlowblocknum            = 3;
    required uint64 txhighblocknum           = 4;
    required uint32 listenport               = 5;
}

// From lookup nodes to node under going vc pre check
message VCNodeSetDSTxBlockFromSeed
{
    repeated ProtoDSBlock dsblocks   = 1;
    repeated ProtoTxBlock txblocks   = 2;
    required ByteArray pubkey        = 3;
    required ByteArray signature     = 4;
}

// ============================================================================
// DS Guard identity update
// ============================================================================

// From DS Guard to lookup. New DS guard node network info.
message DSLookupSetDSGuardNetworkInfoUpdate
{
    message Data
    {
        required uint64 dsepochnumber               = 1;
        required ByteArray dsguardpubkey            = 2;
        required ProtoPeer dsguardnewnetworkinfo    = 3;
        required uint64 timestamp                   = 4;
    }
    required Data data                              = 1;
    required ByteArray signature                    = 2; 
}

// To update shard node of guard node's network info change
message NodeGetGuardNodeNetworkInfoUpdate
{
    required uint32 portno   = 1;
    required uint64 dsepochnumber   = 2;
}

message ProtoDSGuardUpdateStruct
{
    required ByteArray dsguardpubkey            = 1;
    required ProtoPeer dsguardnewnetworkinfo    = 2;
    required uint64 timestamp                   = 3;
}

// From sending New DS guard node network info to requesing shard node
message NodeSetGuardNodeNetworkInfoUpdate
{
    message Data
    {
        repeated ProtoDSGuardUpdateStruct dsguardupdatestruct = 1;
    }
    required Data data                              = 1;
    required ByteArray lookuppubkey                 = 2;
    required ByteArray signature                    = 3;
}

message SeedSetHistoricalDB
{
    message Data
    {
        required uint32 code            = 1;
        optional string path            = 2;
    }
    required Data data                  = 1;
    required ByteArray pubkey           = 2;
    required ByteArray signature        = 3;

}