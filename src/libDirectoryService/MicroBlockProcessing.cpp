/*
 * Copyright (C) 2019 Zilliqa
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include <algorithm>
#include <chrono>
#include <thread>

#include "DirectoryService.h"
#include "common/Constants.h"
#include "libCrypto/Sha2.h"
#include "libData/AccountStore/AccountStore.h"
#include "libMediator/Mediator.h"
#include "libMessage/Messenger.h"
#include "libNode/Node.h"
#include "libUtils/BitVector.h"
#include "libUtils/DataConversion.h"
#include "libUtils/Logger.h"

using namespace std;
using namespace boost::multiprecision;

bool DirectoryService::VerifyMicroBlockCoSignature(
    const MicroBlock& microBlock) {
  LOG_MARKER();

  const vector<bool>& B2 = microBlock.GetB2();
  vector<PubKey> keys;
  unsigned int index = 0;
  unsigned int count = 0;

  if (m_mediator.m_DSCommittee->size() != B2.size()) {
    LOG_GENERAL(WARNING, "Mismatch: Shard(DS) size = "
                             << m_mediator.m_DSCommittee->size()
                             << ", co-sig bitmap size = " << B2.size());
    return false;
  }

  for (const auto& ds : *m_mediator.m_DSCommittee) {
    if (B2.at(index)) {
      keys.emplace_back(ds.first);
      count++;
    }
    index++;
  }

  if (count != ConsensusCommon::NumForConsensus(B2.size())) {
    LOG_GENERAL(WARNING, "Cosig was not generated by enough nodes");
    return false;
  }

  shared_ptr<PubKey> aggregatedKey = MultiSig::AggregatePubKeys(keys);
  if (aggregatedKey == nullptr) {
    LOG_GENERAL(WARNING, "Aggregated key generation failed");
    return false;
  }

  // Verify the collective signature
  zbytes message;
  if (!microBlock.GetHeader().Serialize(message, 0)) {
    LOG_GENERAL(WARNING, "MicroBlockHeader serialization failed");
    return false;
  }
  microBlock.GetCS1().Serialize(message, message.size());
  BitVector::SetBitVector(message, message.size(), microBlock.GetB1());
  if (!MultiSig::MultiSigVerify(message, 0, message.size(), microBlock.GetCS2(),
                                *aggregatedKey)) {
    LOG_GENERAL(WARNING, "Cosig verification failed");
    for (auto& kv : keys) {
      LOG_GENERAL(WARNING, kv);
    }
    return false;
  }

  return true;
}

bool DirectoryService::ProcessStateDelta(
    const zbytes& stateDelta, const StateHash& microBlockStateDeltaHash,
    const BlockHash& microBlockHash) {
  LOG_MARKER();

  if (LOOKUP_NODE_MODE) {
    LOG_GENERAL(WARNING,
                "DirectoryService::ProcessStateDelta not expected to be "
                "called from LookUp node.");
    return true;
  }

  string statedeltaStr;
  if (!DataConversion::charArrToHexStr(microBlockStateDeltaHash.asArray(),
                                       statedeltaStr)) {
    LOG_GENERAL(WARNING, "Invalid state delta hash");
    return false;
  }
  LOG_GENERAL(INFO, "Received MicroBlock State Delta hash : " << statedeltaStr);

  if (microBlockStateDeltaHash == StateHash()) {
    LOG_GENERAL(INFO,
                "State Delta hash received from microblock is null, "
                "skip processing state delta");
    return true;
  }

  if (stateDelta.empty()) {
    LOG_GENERAL(INFO, "State Delta is empty");
    if (microBlockStateDeltaHash != StateHash()) {
      LOG_GENERAL(WARNING, "State Delta and StateDeltaHash inconsistent");
      return false;
    }
    return true;
  } else {
    LOG_GENERAL(INFO, "State Delta size: " << stateDelta.size());
  }

  SHA256Calculator sha2;
  sha2.Update(stateDelta);
  StateHash stateDeltaHash(sha2.Finalize());

  LOG_GENERAL(INFO, "Calculated StateHash: " << stateDeltaHash);

  if (stateDeltaHash != microBlockStateDeltaHash) {
    LOG_GENERAL(WARNING,
                "State delta hash calculated does not match microblock");
    return false;
  }

  if (microBlockStateDeltaHash == StateHash()) {
    LOG_GENERAL(INFO, "State Delta from microblock is empty");
    return false;
  }

  if (!AccountStore::GetInstance().DeserializeDeltaTemp(stateDelta, 0)) {
    LOG_GENERAL(WARNING, "AccountStore::DeserializeDeltaTemp failed.");
    return false;
  }

  if (!AccountStore::GetInstance().SerializeDelta()) {
    LOG_GENERAL(WARNING, "AccountStore::SerializeDelta failed.");
    return false;
  }

  AccountStore::GetInstance().GetSerializedDelta(m_stateDeltaFromShards);

  m_microBlockStateDeltas[m_mediator.m_currentEpochNum].emplace(microBlockHash,
                                                                stateDelta);

  return true;
}

bool DirectoryService::ProcessMicroblockSubmission(
    [[gnu::unused]] const zbytes& message, [[gnu::unused]] unsigned int offset,
    [[gnu::unused]] const Peer& from,
    [[gnu::unused]] const unsigned char& startByte) {
  LOG_MARKER();

  LOG_GENERAL(
      WARNING,
      "BZ ProcessMicroblockSubmission shouldn't be called in dsharded mode!");
  return false;
}
